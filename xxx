diff --git a/common/wlan_lib.c b/common/wlan_lib.c
index cee5d17..2fd49f8 100644
--- a/common/wlan_lib.c
+++ b/common/wlan_lib.c
@@ -3746,9 +3746,11 @@ WLAN_STATUS wlanLoadManufactureData(IN P_ADAPTER_T prAdapter, IN P_REG_INFO_T pr
 #if CFG_SUPPORT_RDD_TEST_MODE
 	CMD_RDD_CH_T rRddParam;
 #endif
-#if CFG_SUPPORT_FCC_DYNAMIC_TX_PWR_ADJUST
+#if 0
+#if CFG_SUPPORT_FCC_DYNAMIC_TX_PWR_ADJUST 0
 	CMD_FCC_TX_PWR_ADJUST FccTxPwrAdjust = {0x00};
 #endif
+#endif
 	CMD_BAND_SUPPORT_T rCmdBandSupport;
 
 	UINT8 uc_NVRAM[EXTEND_NVRAM_SIZE] = {0x0};
@@ -3813,8 +3815,8 @@ WLAN_STATUS wlanLoadManufactureData(IN P_ADAPTER_T prAdapter, IN P_REG_INFO_T pr
 #endif
 		}
 	}
-
-#if CFG_SUPPORT_FCC_DYNAMIC_TX_PWR_ADJUST
+#if 0
+#if CFG_SUPPORT_FCC_DYNAMIC_TX_PWR_ADJUST 0
 	/* Tx Power Adjust for FCC/CE Certification */
 	FccTxPwrAdjust.fgFccTxPwrAdjust = 1;	/* 1:enable; 0:disable */
 	FccTxPwrAdjust.Offset_CCK = 14;		/* drop 7dB */
@@ -3834,6 +3836,7 @@ WLAN_STATUS wlanLoadManufactureData(IN P_ADAPTER_T prAdapter, IN P_REG_INFO_T pr
 			    FALSE, NULL, NULL, sizeof(CMD_FCC_TX_PWR_ADJUST), (PUINT_8) (&FccTxPwrAdjust), NULL, 0);
 
 #endif
+#endif
 
 	/* 3. Check if needs to support 5GHz */
 	/* if(prRegInfo->ucEnable5GBand) { // Frank workaround */
diff --git a/common/wlan_oid.c b/common/wlan_oid.c
index 05f218d..7f19ed6 100644
--- a/common/wlan_oid.c
+++ b/common/wlan_oid.c
@@ -8604,6 +8604,22 @@ wlanoidSetCountryCode(IN P_ADAPTER_T prAdapter,
 	return WLAN_STATUS_SUCCESS;
 }
 
+WLAN_STATUS
+wlanoidSetLowerWifiPower(IN P_ADAPTER_T prAdapter,
+                      IN PVOID pvSetBuffer, IN UINT_32 u4SetBufferLen, OUT PUINT_32 pu4SetInfoLen)
+{
+        PUINT_8 pucEnable;
+        UINT_16 u2Enable;
+
+        *pu4SetInfoLen = 2;
+
+        pucEnable = pvSetBuffer;
+        u2Enable = (((UINT_16) pucEnable[0]) << 8) | ((UINT_16) pucEnable[1]);
+
+        DBGLOG(OID, INFO, "Skip AAAAAAAAAAAAAAAA u2Enable cmd (0x%04x)\n", u2Enable);
+
+        return WLAN_STATUS_SUCCESS;
+}
 #if 0
 WLAN_STATUS
 wlanoidSetNoaParam(IN P_ADAPTER_T prAdapter,
@@ -9279,6 +9295,46 @@ wlanoidSetP2pMode(IN P_ADAPTER_T prAdapter, IN PVOID pvSetBuffer, IN UINT_32 u4S
 
 	DBGLOG(P2P, INFO, "Set P2P enable %p [%u] mode[%u]\n", prSetP2P, prSetP2P->u4Enable, prSetP2P->u4Mode);
 
+#if 0
+        if ((prSetP2P->u4Enable) && (prSetP2P->u4Mode)) {
+            CMD_FCC_TX_PWR_ADJUST rFccTxPwrAdjust;
+            P_FCC_TX_PWR_ADJUST pFccTxPwrAdjust = &(prAdapter->prGlueInfo)->rRegInfo.rFccTxPwrAdjust;
+            WLAN_STATUS rWlanStatus = WLAN_STATUS_FAILURE;
+
+            kalMemSet(&rFccTxPwrAdjust, 0, sizeof(rFccTxPwrAdjust));
+
+            rFccTxPwrAdjust.Offset_CCK = 8;         /* 14 -- drop 7dB */
+            rFccTxPwrAdjust.Offset_HT20 = 8;        /* 16 -- drop 8dB */
+            rFccTxPwrAdjust.Offset_HT40 = 8;        /* 14 -- drop 7dB */
+            rFccTxPwrAdjust.Channel_CCK[0] = 1;     /* start channel */
+            rFccTxPwrAdjust.Channel_CCK[1] = 13;    /* end channel */
+            rFccTxPwrAdjust.Channel_HT20[0] = 1;    /* start channel */
+            rFccTxPwrAdjust.Channel_HT20[1] = 13;   /* end channel */
+            /* start channel, primiary channel 12, HT40, center channel (10) -2 */
+            rFccTxPwrAdjust.Channel_HT40[0] = 1;
+            /* end channel, primiary channel 12, HT40,  center channel (11) -2 */
+            rFccTxPwrAdjust.Channel_HT40[1] = 13;
+            /* set special bandedge*/
+            rFccTxPwrAdjust.Channel_Bandedge[0] = 0;
+            rFccTxPwrAdjust.Channel_Bandedge[1] = 0;
+
+            rWlanStatus = kalIoctl(prAdapter->prGlueInfo,
+                 wlanoidSetFccCert,
+                 (PVOID)&rFccTxPwrAdjust,
+                 sizeof(CMD_FCC_TX_PWR_ADJUST),
+                 FALSE,
+                 FALSE,
+                 TRUE,
+                 FALSE,
+                 NULL);
+
+                 if (rWlanStatus == WLAN_STATUS_SUCCESS) {
+                     DBGLOG(P2P, INFO, "AAAAAAAAAAAAAAAAAAAAAA succ (%d)\n", rFccTxPwrAdjust.fgFccTxPwrAdjust);
+                 } else {
+                     DBGLOG(P2P, INFO, "AAAAAAAAAAAAAAAAAAAAAA fail (%d)\n", rFccTxPwrAdjust.fgFccTxPwrAdjust);
+                 }
+        }
+#endif
 	/*
 	 *    enable = 1, mode = 0  => init P2P network
 	 *    enable = 1, mode = 1  => init Soft AP network
diff --git a/include/config.h b/include/config.h
index aa89242..f8bbcb5 100644
--- a/include/config.h
+++ b/include/config.h
@@ -78,7 +78,7 @@
 #define CFG_SUPPORT_CFG_FILE     1
 #endif
 
-#define CFG_SUPPORT_FCC_DYNAMIC_TX_PWR_ADJUST 0  /* Support FCC/CE Dynamic Tx Power Adjust */
+#define CFG_SUPPORT_FCC_DYNAMIC_TX_PWR_ADJUST 1  /* Support FCC/CE Dynamic Tx Power Adjust */
 
 #define CFG_SUPPORT_CE_FCC_TXPWR_LIMIT 0 /* Support CE FCC Tx Power limit */
 
@@ -789,7 +789,7 @@
 
 #define CFG_SUPPORT_TX_POWER_BACK_OFF       1
 
-#define CFG_SUPPORT_FCC_POWER_BACK_OFF             0
+#define CFG_SUPPORT_FCC_POWER_BACK_OFF             1
 
 
 #define CFG_SUPPORT_P2P_ECSA                       0
diff --git a/include/wlan_oid.h b/include/wlan_oid.h
index 805b8ab..f98a65e 100644
--- a/include/wlan_oid.h
+++ b/include/wlan_oid.h
@@ -1586,6 +1586,10 @@ WLAN_STATUS
 wlanoidSetCountryCode(IN P_ADAPTER_T prAdapter,
 		      IN PVOID pvSetBuffer, IN UINT_32 u4SetBufferLen, OUT PUINT_32 pu4SetInfoLen);
 
+WLAN_STATUS
+wlanoidSetLowerWifiPower(IN P_ADAPTER_T prAdapter,
+                      IN PVOID pvSetBuffer, IN UINT_32 u4SetBufferLen, OUT PUINT_32 pu4SetInfoLen);
+
 #ifdef CFG_TC1_FEATURE /* for Passive Scan */
 WLAN_STATUS
 wlanoidSetPassiveScan(IN P_ADAPTER_T  prAdapter,
diff --git a/os/linux/gl_init.c b/os/linux/gl_init.c
index 339bc5c..3f80f4d 100644
--- a/os/linux/gl_init.c
+++ b/os/linux/gl_init.c
@@ -349,6 +349,14 @@ static const struct wiphy_vendor_command mtk_wlan_vendor_ops[] = {
 		.flags = WIPHY_VENDOR_CMD_NEED_WDEV | WIPHY_VENDOR_CMD_NEED_NETDEV,
 		.doit = mtk_cfg80211_vendor_enable_roaming
 	},
+        {
+                {
+                        .vendor_id = GOOGLE_OUI,
+                        .subcmd = WIFI_SUBCMD_SET_LOWER_WIFI_POWER
+                },
+                .flags = WIPHY_VENDOR_CMD_NEED_WDEV | WIPHY_VENDOR_CMD_NEED_NETDEV,
+                .doit = mtk_cfg80211_vendor_set_lower_wifi_power
+        },
 	/* GSCAN */
 #if CFG_SUPPORT_GSCN
 	{
@@ -778,7 +786,8 @@ static void glLoadNvram(IN P_GLUE_INFO_T prGlueInfo, OUT P_REG_INFO_T prRegInfo)
 
 
 #endif
-#if CFG_SUPPORT_FCC_POWER_BACK_OFF
+#if 0
+#if CFG_SUPPORT_FCC_POWER_BACK_OFF 0
 	/* load FCC cert. parameters */
 	kalCfgDataRead(prGlueInfo,
 		       OFFSET_OF(WIFI_CFG_PARAM_STRUCT, rFccTxPwrAdjust),
@@ -807,6 +816,7 @@ static void glLoadNvram(IN P_GLUE_INFO_T prGlueInfo, OUT P_REG_INFO_T prRegInfo)
 	DBGLOG(INIT, TRACE, "FCC Tx power channel band edge [%d, %d]\n",
 		prRegInfo->aucChannelBandEdge[0], prRegInfo->aucChannelBandEdge[1]);
 #endif
+#endif
 	startAddr = OFFSET_OF(REG_INFO_T, aucMacAddr);
 	len = sizeof(REG_INFO_T);
 	DBGLOG_MEM8_IE_ONE_LINE(INIT, INFO, "RegInfo", (PUINT_8)prRegInfo + startAddr, len);
diff --git a/os/linux/gl_p2p.c b/os/linux/gl_p2p.c
index 8d4d892..847031b 100644
--- a/os/linux/gl_p2p.c
+++ b/os/linux/gl_p2p.c
@@ -133,6 +133,14 @@ static const struct wiphy_vendor_command mtk_p2p_vendor_ops[] = {
 		.flags = WIPHY_VENDOR_CMD_NEED_WDEV | WIPHY_VENDOR_CMD_NEED_NETDEV,
 		.doit = mtk_cfg80211_vendor_config_roaming
 	},
+        {
+                {
+                        .vendor_id = GOOGLE_OUI,
+                        .subcmd = WIFI_SUBCMD_SET_LOWER_WIFI_POWER
+                },
+                .flags = WIPHY_VENDOR_CMD_NEED_WDEV | WIPHY_VENDOR_CMD_NEED_NETDEV,
+                .doit = mtk_cfg80211_vendor_set_lower_wifi_power
+        },
 };
 
 /* There isn't a lot of sense in it, but you can transmit anything you like */
diff --git a/os/linux/gl_vendor.c b/os/linux/gl_vendor.c
index cfb4071..6dd2ba3 100644
--- a/os/linux/gl_vendor.c
+++ b/os/linux/gl_vendor.c
@@ -113,7 +113,7 @@
 ********************************************************************************
 */
 
-static struct nla_policy nla_parse_wifi_policy[WIFI_ATTRIBUTE_ROAMING_STATE + 1] = {
+static struct nla_policy nla_parse_wifi_policy[WIFI_ATTRIBUTE_LOWER_WIFI_POWER + 1] = {
 	[WIFI_ATTRIBUTE_BAND] = {.type = NLA_U32},
 	[WIFI_ATTRIBUTE_NUM_CHANNELS] = {.type = NLA_U32},
 	[WIFI_ATTRIBUTE_CHANNEL_LIST] = {.type = NLA_UNSPEC},
@@ -134,6 +134,7 @@ static struct nla_policy nla_parse_wifi_policy[WIFI_ATTRIBUTE_ROAMING_STATE + 1]
 	[WIFI_ATTRIBUTE_ROAMING_WHITELIST_NUM] = {.type = NLA_U32},
 	[WIFI_ATTRIBUTE_ROAMING_WHITELIST_SSID] = {.type = NLA_UNSPEC},
 	[WIFI_ATTRIBUTE_ROAMING_STATE] = {.type = NLA_U32},
+        [WIFI_ATTRIBUTE_LOWER_WIFI_POWER] = {.type = NLA_STRING}
 };
 
 static struct nla_policy nla_parse_gscan_policy[GSCAN_ATTRIBUTE_SIGNIFICANT_CHANGE_FLUSH + 1] = {
@@ -305,6 +306,43 @@ int mtk_cfg80211_vendor_set_country_code(struct wiphy *wiphy, struct wireless_de
 	return 0;
 }
 
+int mtk_cfg80211_vendor_set_lower_wifi_power(struct wiphy *wiphy, struct wireless_dev *wdev,
+                                         const void *data, int data_len)
+{
+        P_GLUE_INFO_T prGlueInfo;
+        WLAN_STATUS rStatus;
+        UINT_32 u4BufLen;
+        struct nlattr *attr;
+        UINT_8 enable[2] = {0, 0};
+
+        ASSERT(wiphy && wdev);
+        if ((data == NULL) || (data_len == 0))
+                return -EINVAL;
+
+        attr = (struct nlattr *)data;
+        if (attr->nla_type == WIFI_ATTRIBUTE_LOWER_WIFI_POWER) {
+                enable[0] = *((PUINT_8)nla_data(attr));
+                enable[1] = *((PUINT_8)nla_data(attr) + 1);
+        }
+
+        DBGLOG(REQ, INFO, "Set lower power: %c%c, iftype=%d\n", enable[0], enable[1], wdev->iftype);
+
+        if (wdev->iftype == NL80211_IFTYPE_AP)
+                prGlueInfo = *((P_GLUE_INFO_T *) wiphy_priv(wiphy));
+        else
+                prGlueInfo = (P_GLUE_INFO_T) wiphy_priv(wiphy);
+        if (!prGlueInfo)
+                return -EFAULT;
+
+        rStatus = kalIoctl(prGlueInfo, wlanoidSetLowerWifiPower, enable, 2, FALSE, FALSE, TRUE, FALSE, &u4BufLen);
+        if (rStatus != WLAN_STATUS_SUCCESS) {
+                DBGLOG(REQ, ERROR, "Set lower power error: %x\n", rStatus);
+                return -EFAULT;
+        }
+
+        return 0;
+}
+
 int mtk_cfg80211_vendor_set_scan_mac_oui(struct wiphy *wiphy,
 	struct wireless_dev *wdev, const void *data, int data_len)
 {
diff --git a/os/linux/gl_wext_priv.c b/os/linux/gl_wext_priv.c
index d4e2ac7..b4c1aec 100644
--- a/os/linux/gl_wext_priv.c
+++ b/os/linux/gl_wext_priv.c
@@ -77,6 +77,7 @@
 #define CMD_ADD_TS          "addts"
 #define CMD_DELETE_TS		"delts"
 #define CMD_FW_PARAM            "set_fw_param "
+#define CMD_LOWER_POWER_BACKOFF            "lower_power_backoff"
 
 /* miracast related definition */
 #define MIRACAST_MODE_OFF	0
@@ -4966,21 +4967,21 @@ INT_32 priv_driver_cmds(IN struct net_device *prNetDev, IN PCHAR pcCommand, IN I
 					       pcCommand);
 				else {
 					kalMemSet(&rFccTxPwrAdjust, 0, sizeof(rFccTxPwrAdjust));
-#if 0
-					rFccTxPwrAdjust.Offset_CCK = 14;	/* drop 7dB */
-					rFccTxPwrAdjust.Offset_HT20 = 16;	/* drop 8dB */
-					rFccTxPwrAdjust.Offset_HT40 = 14;	/* drop 7dB */
-					rFccTxPwrAdjust.Channel_CCK[0] = 12;	/* start channel */
+#if 1
+					rFccTxPwrAdjust.Offset_CCK = 8;	        /* 14 -- drop 7dB */
+					rFccTxPwrAdjust.Offset_HT20 = 8;	/* 16 -- drop 8dB */
+					rFccTxPwrAdjust.Offset_HT40 = 8;	/* 14 -- drop 7dB */
+					rFccTxPwrAdjust.Channel_CCK[0] = 1;	/* start channel */
 					rFccTxPwrAdjust.Channel_CCK[1] = 13;	/* end channel */
-					rFccTxPwrAdjust.Channel_HT20[0] = 12;	/* start channel */
+					rFccTxPwrAdjust.Channel_HT20[0] = 1;	/* start channel */
 					rFccTxPwrAdjust.Channel_HT20[1] = 13;	/* end channel */
 					/* start channel, primiary channel 12, HT40, center channel (10) -2 */
-					rFccTxPwrAdjust.Channel_HT40[0] = 8;
+					rFccTxPwrAdjust.Channel_HT40[0] = 1;
 					/* end channel, primiary channel 12, HT40,  center channel (11) -2 */
-					rFccTxPwrAdjust.Channel_HT40[1] = 9;
+					rFccTxPwrAdjust.Channel_HT40[1] = 13;
 					/* set special bandedge*/
-					rFccTxPwrAdjust.Channel_Bandedge[0] = 11;
-					rFccTxPwrAdjust.Channel_Bandedge[1] = 13;
+					rFccTxPwrAdjust.Channel_Bandedge[0] = 0;
+					rFccTxPwrAdjust.Channel_Bandedge[1] = 0;
 #else
 					kalMemCopy(&rFccTxPwrAdjust, pFccTxPwrAdjust, sizeof(FCC_TX_PWR_ADJUST));
 					/* set special channel band edge */
@@ -5213,12 +5214,22 @@ INT_32 priv_driver_cmds(IN struct net_device *prNetDev, IN PCHAR pcCommand, IN I
 			i4BytesWritten = priv_driver_disable_ncho(prNetDev, pcCommand, i4TotalLen);
 		}
 #endif
-		else if (!strncasecmp(pcCommand, CMD_FW_PARAM, strlen(CMD_FW_PARAM)))
+		else if (!strncasecmp(pcCommand, CMD_FW_PARAM, strlen(CMD_FW_PARAM))) {
+                        DBGLOG(REQ, ERROR, "Unknown driver commad AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA \n");
 			kalIoctl(prGlueInfo, wlanoidSetFwParam, (PVOID)(pcCommand + 13),
 				 i4TotalLen - 13, FALSE, FALSE, FALSE, FALSE, &i4BytesWritten);
-		else if (!strncasecmp(pcCommand, CMD_GET_WIFI_TYPE, strlen(CMD_GET_WIFI_TYPE)))
+                } else if (!strncasecmp(pcCommand, CMD_LOWER_POWER_BACKOFF, strlen(CMD_LOWER_POWER_BACKOFF))) {
+                        DBGLOG(REQ, ERROR, "priv command POWER_BACKOFF\n");
+                        WLAN_STATUS rWlanStatus = WLAN_STATUS_FAILURE;
+
+                        pcCommand += (strlen(CMD_LOWER_POWER_BACKOFF) + 1);
+
+                        kalIoctl(prGlueInfo, wlanoidSetLowerPowerBackoff, (PVOID)(pcCommand),
+                                 sizeof(CMD_LOWER_POWER_BACKOFF), FALSE, FALSE, FALSE, FALSE, NULL);
+
+ 		} else if (!strncasecmp(pcCommand, CMD_GET_WIFI_TYPE, strlen(CMD_GET_WIFI_TYPE))) {
 			i4BytesWritten = priv_driver_get_wifi_type(prNetDev, pcCommand, i4TotalLen);
-		else
+		} else
 			i4CmdFound = 0;
 	}
 
diff --git a/os/linux/include/gl_vendor.h b/os/linux/include/gl_vendor.h
index 22e6832..3705898 100644
--- a/os/linux/include/gl_vendor.h
+++ b/os/linux/include/gl_vendor.h
@@ -92,7 +92,7 @@ typedef enum {
 	WIFI_SUBCMD_ENABLE_ROAMING,					/* 0x000b */
 
 	WIFI_SUBCMD_SELECT_TX_POWER_SCENARIO,				/* 0x000c */
-
+        WIFI_SUBCMD_SET_LOWER_WIFI_POWER,                               /* 0x000d */
 } WIFI_SUB_COMMAND;
 
 typedef enum {
@@ -167,7 +167,7 @@ typedef enum {
 	WIFI_ATTRIBUTE_ROAMING_STATE,
 
 	WIFI_ATTRIBUTE_TX_POWER_SCENARIO,
-
+        WIFI_ATTRIBUTE_LOWER_WIFI_POWER,
 } WIFI_ATTRIBUTE;
 
 /* moved from wifi_logger.cpp */
@@ -725,6 +725,9 @@ int mtk_cfg80211_vendor_get_channel_list(struct wiphy *wiphy, struct wireless_de
 int mtk_cfg80211_vendor_set_country_code(struct wiphy *wiphy, struct wireless_dev *wdev,
 					 const void *data, int data_len);
 
+int mtk_cfg80211_vendor_set_lower_wifi_power(struct wiphy *wiphy, struct wireless_dev *wdev,
+                                         const void *data, int data_len);
+
 #if CFG_SUPPORT_GSCN
 int mtk_cfg80211_vendor_get_gscan_capabilities(struct wiphy *wiphy, struct wireless_dev *wdev,
 					       const void *data, int data_len);
